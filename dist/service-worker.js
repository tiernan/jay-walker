"use strict";var version="0.1.0",manifest="files-manifest.json";self.addEventListener("install",function(e){e.waitUntil(Promise.all([caches.open(version).then(function(e){var n=new Request(manifest);return fetch(n).then(function(t){if(t.ok){e.put(n,t.clone());var o=t.headers.get("content-type");return o&&o.indexOf("application/json")!==-1?t.json().then(function(n){return e.addAll(n)})["catch"](function(){return console.log("Warning: Manifest malformed, skipping preload"),Promise.resolve(!1)}):(console.log("Warning: Manifest Content-Type mismatch."),Promise.resolve())}return console.log("Notice: No manifest present; presuming dev version."),Promise.resolve()})["catch"](function(e){throw console.log("Warning: network error during install"),e})}),skipWaiting()]))}),self.addEventListener("activate",function(e){e.waitUntil(caches.keys().then(function(e){return Promise.all(e.map(function(e){if(e!==version)return console.log("Deleting old cache:",e),caches["delete"](e)}))}).then(function(){clients.claim()}))}),self.addEventListener("fetch",function(e){e.respondWith(caches.open(version).then(function(n){return n.match(e.request).then(function(t){return t||fetch(e.request).then(function(t){return t.ok?n.put(e.request,t.clone()):console.log("Warning: Bad Response for url: "+t.url),t})["catch"](function(e){throw e})})}))});